/**
 * Copyright &copy; 2012-2014 <a href="https://github.com/thinkgem/jeesite">JeeSite</a> All rights reserved.
 */
package com.wanfin.fpd.modules.wish.order.service;

import java.math.BigDecimal;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wanfin.fpd.common.config.Cons;
import com.wanfin.fpd.common.config.Global;
import com.wanfin.fpd.common.persistence.Page;
import com.wanfin.fpd.common.service.CrudService;
import com.wanfin.fpd.common.utils.DateUtils;
import com.wanfin.fpd.common.utils.IdGen;
import com.wanfin.fpd.common.utils.StringUtils;
import com.wanfin.fpd.modules.company.entity.TCompany;
import com.wanfin.fpd.modules.company.service.TCompanyService;
import com.wanfin.fpd.modules.contract.entity.TLoanContract;
import com.wanfin.fpd.modules.contract.service.TLoanContractService;
import com.wanfin.fpd.modules.employee.entity.TEmployee;
import com.wanfin.fpd.modules.employee.service.TEmployeeService;
import com.wanfin.fpd.modules.receivables.entity.RepayRecord;
import com.wanfin.fpd.modules.receivables.service.RepayRecordService;
import com.wanfin.fpd.modules.repayplan.entity.TRepayPlan;
import com.wanfin.fpd.modules.repayplan.service.TRepayPlanService;
import com.wanfin.fpd.modules.wish.contract.service.WishContractService;
import com.wanfin.fpd.modules.wish.merchant.entity.Merchant;
import com.wanfin.fpd.modules.wish.merchant.service.MerchantService;
import com.wanfin.fpd.modules.wish.order.entity.ReturnedMoney;
import com.wanfin.fpd.modules.wish.order.dao.ReturnedMoneyDao;

/**
 * 回款记录Service
 * 
 * @author cjp
 * @version 2017-07-07
 */
@Service("returnedMoneyService")
@Transactional(readOnly = true)
public class ReturnedMoneyService extends CrudService<ReturnedMoneyDao, ReturnedMoney> {

	@Autowired
	WishOrderService wishOrderService;
	@Autowired
	private TLoanContractService tLoanContractService;
	@Autowired
	TRepayPlanService tRepayPlanService;
	@Autowired
	TEmployeeService tEmployeeService;
	
	@Autowired
	MerchantService merchantService;
	
	
	@Autowired
	private TCompanyService tCompanyService;
	
	@Autowired
	private RepayRecordService repayRecordService;
	
	@Autowired
	private WishContractService wishContractService;

	private String tLoanContractId = "";
	
/*	@Autowired
	private InteractionService interactionService;
	
	private String pvdUid;
	private String loanStatus;
	private String amount;
	private String diffLoanAmount;*/


	public ReturnedMoney get(String id) {
		return super.get(id);
	}

	public List<ReturnedMoney> findList(ReturnedMoney returnedMoney) {
		return super.findList(returnedMoney);
	}

	public Page<ReturnedMoney> findPage(Page<ReturnedMoney> page,
			ReturnedMoney returnedMoney) {
		return super.findPage(page, returnedMoney);
	}

	@Transactional(readOnly = false)
	public void save(ReturnedMoney returnedMoney) {
		super.save(returnedMoney);
	}

	@Transactional(readOnly = false)
	public void delete(ReturnedMoney returnedMoney) {
		super.delete(returnedMoney);
	}

	
	
	
	/**
	 * 回款操作计算应扣款------------此处只用于计算应扣款金额，具体的业务更新在实际收到款项时realRepayMoney()方法中处理
	 * 
	 * @return
	 * @throws ParseException
	 */
	@Transactional(readOnly = false)
	public Map<String,String> repayMoney() throws ParseException {
		//SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Map<String,String> map=new HashMap<String, String>();
		String userId = "";
		String userName="";
		
		ReturnedMoney returnedMoney = new ReturnedMoney();
		returnedMoney.setIsDeal("0");
		List<ReturnedMoney> rlist = this.findList(returnedMoney);
		if(rlist.size()<1){
			map.put("msg", "操作失败，待处理回款数据条数为：0");
			return map;
		}
		for (ReturnedMoney rm : rlist) {
		//	String accountNum = rm.getAccountNum();
			String merchantId=rm.getMerchantId();
			Merchant merchant=new Merchant();
			merchant.setMerchantId(merchantId);
		    merchant=merchantService.getByMerchantId(merchant);
			userId=merchant.getUserId();
			userName=merchant.getUserName();
			
			Date createTime = rm.getCreateDate();
			if (StringUtils.isBlank(merchantId) || StringUtils.isBlank(rm.getRealPayMoney()) || createTime == null) {
				map.put("msg", "操作失败，回款数据信息有误");
				return map;
			}
		/*	TEmployee y = new TEmployee();
			TCompany c = new TCompany();
			
			y.setId(userId);
			TEmployee employee=tEmployeeService.get(y);
			
			c.setId(userId);
			TCompany company=tCompanyService.get(c);
			
			if (employee!=null){
				userId=employee.getId();
				userName=employee.getName();
				gatheringNumber=employee.getGatheringNumber();
			}else if(company!=null){
				userId=company.getId();
				userName=company.getName();
				gatheringNumber=company.getGatheringNumber();
			}*/
			//if (StringUtils.isNotBlank(userId) && StringUtils.isNotBlank(userName) && gatheringNumber.endsWith(rm.getAccountNum())) {
			if (StringUtils.isNotBlank(userId) && StringUtils.isNotBlank(userName)) {
				Calendar cal = Calendar.getInstance();
				cal.setTime(createTime);
				int year = cal.get(Calendar.YEAR);// 获取年份
				int month = cal.get(Calendar.MONTH)+1;// 获取月份---Calendar月份初始值为0
				int dd = cal.get(Calendar.DATE);

				String startTime = "";
				String endTime = "";
				String months="";
				String dds="";
				if (dd > 14) {
					if(month<10){
						months="0"+month;
					}
					if(dd<10){
					    dds="0"+dd;
					}else{
						 dds=""+dd;
					}
					startTime = year + "-" + months + "-" + "15";
					endTime = lastDate(year + "-" + months + "-" + dds);
				} else {
					if(month<10){
						months="0"+month;
					}
					startTime = year + "-" + months + "-" + "01";
					endTime = year + "-" + months + "-" + "14";
				}
				// "8,2000,2017-08-15,2017-08-31,2000,2017-09-01,2017-09-14,0,1"
				BigDecimal realMoney = StringUtils.isBlank(rm.getRealPayMoney())?new BigDecimal("0"):new BigDecimal(rm.getRealPayMoney());
				//BigDecimal repayLoanMoney=realMoney;
				BigDecimal fee=new BigDecimal("0");//罚息金额
			
				
				 
				
				/***********************************逾期还款处理*****************************************/
				if(realMoney.compareTo(BigDecimal.ZERO)==1){
					TRepayPlan overPlan = new TRepayPlan();
					overPlan.setWishUserId(userId);
					overPlan.setStatus(Cons.RepayStatus.IN_PAYMENT);
					overPlan.setNum(2);
					overPlan.setIsYuQi(Global.YES);
					List<TRepayPlan> overList = tRepayPlanService.findListByNum(overPlan);//统计逾期未还多少笔
					
					for(int i=0;i<overList.size();i++){
						TRepayPlan overtrp=overList.get(i);
						if(StringUtils.isNotBlank(overtrp.getAccountDate())){//wish业务accountDate用于标记第二批回款逾期开始计时时间
						  TLoanContract tct=tLoanContractService.get(overtrp.getLoanContractId());
	                	  BigDecimal principal=StringUtils.isBlank(overtrp.getPrincipal())?new BigDecimal("0"):new BigDecimal(overtrp.getPrincipal());
	                	  BigDecimal principalReal=StringUtils.isBlank(overtrp.getPrincipalReal())?new BigDecimal("0"):new BigDecimal(overtrp.getPrincipalReal());
	                	  BigDecimal diffPrincipal=principal.subtract(principalReal);//剩余应还本金
	                	  BigDecimal interest=StringUtils.isBlank(overtrp.getInterest())?new BigDecimal("0"):new BigDecimal(overtrp.getInterest());
	                	  BigDecimal interestReal=StringUtils.isBlank(overtrp.getInterestReal())?new BigDecimal("0"):new BigDecimal(overtrp.getInterestReal());
	                	  BigDecimal diffInterest=interest.subtract(interestReal);//由于首期未结清 造成的本期应还金额
	                	  double overdueDays = DateUtils.getDistanceOfTwoDate(DateUtils.parseDate(overtrp.getAccountDate()),createTime);//逾期天数
	                	  //BigDecimal rate=new BigDecimal(tct.getLoanRate()).divide(new BigDecimal(100), 2, BigDecimal.ROUND_HALF_UP).divide(new BigDecimal(360), 2, BigDecimal.ROUND_HALF_UP);
	                      //（实际回款日期-实际第二回款日期）*逾期金额*年利率/360
	                	 // BigDecimal overFee=new BigDecimal(overdueDays).multiply(diffPrincipal.add(diffInterest)).multiply(rate);
	                	//  BigDecimal sumAmount=diffPrincipal.add(diffInterest).add(overFee);//总计应还
	                	    BigDecimal sumAmount=diffPrincipal.add(diffInterest);//总计应还
	                	  //fee=fee.add(overFee);
	                	 // realMoney=realMoney.subtract(overFee);//扣除罚息--剩下金额再还款
	                	  
	                	  if(realMoney.compareTo(BigDecimal.ZERO)==1){
	                		  if(realMoney.compareTo(sumAmount)>=0){//结清
	  	                        overtrp.setStatus(Cons.RepayStatus.PAID);
	  	                        overtrp.setPrincipalReal(principal.toString());
	  	                        overtrp.setInterestReal(interest.toString());
	  	                       // tRepayPlanService.save(overtrp);
	  	                        //tct.setStatus(Cons.LoanContractStatus.CLEARED);//业务完成
	  	                        //tLoanContractService.updateStatus(tct);
	  	                        realMoney=realMoney.subtract(sumAmount);
	  	                        
	  	                      }else{//未结清---------产生逾期
	  	                        if(realMoney.compareTo(diffInterest)>=0){//先处理interest
	  	                        	overtrp.setInterestReal(interest.toString());
	  	                        	overtrp.setPrincipalReal((principalReal.add(realMoney.subtract(diffInterest)).toString()));
	  	                        }else{
	  	                        	overtrp.setInterestReal((interestReal.add(realMoney)).toString());
	  	                        }
	  	                         overtrp.setStatus(Cons.RepayStatus.IN_PAYMENT);
	  	                    	// tRepayPlanService.save(overtrp);
	  	                    	 realMoney=new BigDecimal("0");
	  	                        }
	  	                      
	                	  }
					  }	
					}
					
					
					
				}
				
				/***********************************首批还款处理*****************************************/
				if(realMoney.compareTo(BigDecimal.ZERO)==1){
					TRepayPlan tp = new TRepayPlan();
					tp.setWishUserId(userId);
					//tp.setStartDate(startTime);
					//tp.setEndDate(endTime);
					tp.setStatus(Cons.RepayStatus.NEED_PAY);
				    tp.setNum(1);
					List<TRepayPlan> oneList = tRepayPlanService.findListByNum(tp);//统计某个时间段内首批有多少笔还款
	                for(int i=0;i<oneList.size();i++){
	                	TRepayPlan trp=oneList.get(i);
	                	TLoanContract tct=tLoanContractService.get(trp.getLoanContractId());
	                	BigDecimal amount=StringUtils.isBlank(tct.getLoanAmount())?new BigDecimal("0"):new BigDecimal(tct.getLoanAmount());
	                	
	                	BigDecimal principal=StringUtils.isBlank(trp.getPrincipal())?new BigDecimal("0"):new BigDecimal(trp.getPrincipal());
	                	BigDecimal principalReal=StringUtils.isBlank(trp.getPrincipalReal())?new BigDecimal("0"):new BigDecimal(trp.getPrincipalReal());
	                	BigDecimal diffAmount=principal.subtract(principalReal);//剩余应还
	                	//if(realMoney.compareTo(BigDecimal.ZERO)==1){
	                	
	                    		if(realMoney.subtract(diffAmount).compareTo(BigDecimal.ZERO)>=0){//结清----------首批多还不做处理
	                    			trp.setStatus(Cons.RepayStatus.PAID);
	                    			trp.setPrincipalReal(principal.toString());
	                    			//tRepayPlanService.save(trp);
	                    			
	                    			realMoney=realMoney.subtract(diffAmount);
	                    			
	                    			if(principal.compareTo(amount)==0){//首批就还完整比合同的贷款----业务还完生成还款记录repayRecord
	                    				//tct.setStatus(Cons.LoanContractStatus.CLEARED);//业务完成
		                    			//tLoanContractService.updateStatus(tct);
		                    			
		                    			TRepayPlan ntp = new TRepayPlan();
		                    			ntp.setNum(2);//获取同笔借款第二批还款计划
		                    			ntp.setLoanContractId(trp.getLoanContractId());
		                    			List<TRepayPlan> nextList = tRepayPlanService.findListByNum(ntp);
		                    			if(nextList.size()==1){
		                    				TRepayPlan nextPlan=nextList.get(0);
		                    				nextPlan.setStatus(Cons.RepayStatus.PAID);
		                        			//tRepayPlanService.save(nextPlan);
		                    			}
		                    			
	                    			}
	                    			
	                        	}else{//未结清---------首批少还的部分放到下一期----------这里业务没还完不需要生成还款记录推至下期生成
	                        		//repayRecord.setMoney(realMoney.doubleValue());
	                        		trp.setStatus(Cons.RepayStatus.PAID);
	                    			trp.setPrincipalReal(realMoney.toString());
	                    			//tRepayPlanService.save(trp);
	                    			
	                    			TRepayPlan ntp = new TRepayPlan();
	                    			ntp.setNum(2);//获取同笔借款第二批还款计划
	                    			ntp.setLoanContractId(trp.getLoanContractId());
	                    			List<TRepayPlan> nextList = tRepayPlanService.findListByNum(ntp);
	                    			if(nextList.size()==1){
	                    				TRepayPlan nextPlan=nextList.get(0);
	                        			//将首期未还的金额计算到下期的利息中，在二批的还款中处理
	                        			nextPlan.setInterest((new BigDecimal(trp.getPrincipal()).subtract(new BigDecimal(trp.getPrincipalReal()))).toString());
	                        			//tRepayPlanService.save(nextPlan);
	                        			realMoney=new BigDecimal("0");
	                    			}else{
	                    				map.put("msg", "操作失败，获取第二批回款计划数据错误！");
	                    				return map;
	                    			}
	                        	}
	                    		
	                	//}
	                }
				}
				
                
                /***********************************第二批还款处理*****************************************/
				
				if(realMoney.compareTo(BigDecimal.ZERO)>=0){
					TRepayPlan twoPlan = new TRepayPlan();
	            	twoPlan.setWishUserId(userId);
	            	twoPlan.setStartDate(startTime);
	            	twoPlan.setEndDate(endTime);
	            	twoPlan.setStatus(Cons.RepayStatus.NEED_PAY);
	            	twoPlan.setNum(2);
	            	twoPlan.setIsYuQi(Global.NO);
	                List<TRepayPlan> twoList = tRepayPlanService.findListByNum(twoPlan);//统计某个时间段内第二批有多少笔还款
	                for(int i=0;i<twoList.size();i++){
	                	TRepayPlan twotrp=twoList.get(i);
	                	TLoanContract tct=tLoanContractService.get(twotrp.getLoanContractId());
	                	BigDecimal principal=StringUtils.isBlank(twotrp.getPrincipal())?new BigDecimal("0"):new BigDecimal(twotrp.getPrincipal());
	                	BigDecimal principalReal=StringUtils.isBlank(twotrp.getPrincipalReal())?new BigDecimal("0"):new BigDecimal(twotrp.getPrincipalReal());
	                	BigDecimal diffPrincipal=principal.subtract(principalReal);//剩余应还本金
	                	BigDecimal interest=StringUtils.isBlank(twotrp.getInterest())?new BigDecimal("0"):new BigDecimal(twotrp.getInterest());
	                	BigDecimal interestReal=StringUtils.isBlank(twotrp.getInterestReal())?new BigDecimal("0"):new BigDecimal(twotrp.getInterestReal());
	                	BigDecimal diffInterest=interest.subtract(interestReal);//由于首期未结清 造成的本期应还金额
	                	BigDecimal sumAmount=diffPrincipal.add(diffInterest);//总计应还
	
	                	//if(realMoney.compareTo(BigDecimal.ZERO)==1){
	                    		if(realMoney.subtract(sumAmount).compareTo(BigDecimal.ZERO)>=0){//结清
	                    			twotrp.setStatus(Cons.RepayStatus.PAID);
	                    			twotrp.setPrincipalReal(principal.toString());
	                    			twotrp.setInterestReal(interest.toString());
	                    			//tRepayPlanService.save(twotrp);
	                    			tct.setStatus(Cons.LoanContractStatus.CLEARED);//业务完成
	                    			//tLoanContractService.updateStatus(tct);
	                    			realMoney=realMoney.subtract(sumAmount);
	                    			
	                        	}else{//未结清---------产生逾期
	                        		if(realMoney.compareTo(diffInterest)>=0){//先处理interest
	                        			twotrp.setInterestReal(interest.toString());
	                        			twotrp.setPrincipalReal((principalReal.add(realMoney.subtract(diffInterest)).toString()));
	                        		}else{
	                        			twotrp.setInterestReal((interestReal.add(realMoney)).toString());
	                        		}
	                        		twotrp.setIsYuQi(Global.YES);//第二次还款没有结清，则开始逾期
	                        		twotrp.setYuQi(String.valueOf(0));
	                        		twotrp.setStatus(Cons.RepayStatus.IN_PAYMENT);
	                        		twotrp.setAccountDate(DateUtils.formatDate(createTime, "yyyy-MM-dd"));//已第二次还款时间为逾期开始计算时间
	                    			//tRepayPlanService.save(twotrp);
	                    			//tct.setStatus(Cons.LoanContractStatus.OVERDUE);//业务逾期
	                    			//tLoanContractService.updateStatus(tct);
	                        	}
	                }
				}
				rm.setFee(fee.toString());
				rm.setRepayLoanMoney(new BigDecimal(rm.getRealPayMoney()).subtract(realMoney).toString());
				rm.setUserId(userId);
				rm.setUserName(userName);
				//rm.setLastBackAmount(lastBackAmount.toString());
				BigDecimal realPayMoney=StringUtils.isBlank(rm.getRealPayMoney())?new BigDecimal("0"):new BigDecimal(rm.getRealPayMoney());
				if(realPayMoney.compareTo(BigDecimal.ZERO)==1){
					rm.setIsDeal("1");
				}
				this.save(rm);
				map.put("msg", "success");
			}
		}
		return map;
	}

	
	/**
	 * 回款操作------------:处理顺序：逾期---》首批计划----》第二批计划
	 * 
	 * 说明： 1.定时器处理 第二批一直没有还款操作的收款计划，更新逾期accountDate
	 *      2.收款操作先处理逾期的计划
	 *      3.收款操作处理首批计划
	 *      4 收款操作处理二批计划
	 *      
	 *      注意：由于逾期由步骤1和步骤4触发，所以在步骤2会包含所有的逾期记录 ，所以逾期罚息只在步骤2处理即可
	 * 
	 * @return
	 * @throws ParseException
	 */
	@Transactional(readOnly = false)
	public Map<String,String> realRepayMoney(String returnedMoneyIds) throws ParseException {
		Map<String,String> map=new HashMap<String, String>();
		String userId = "";
		String userName="";
		
		ReturnedMoney returnedMoney = new ReturnedMoney();
		returnedMoney.setIsDeal("1");
		returnedMoney.setId(returnedMoneyIds);
		List<ReturnedMoney> rlist = this.findListByIds(returnedMoney);
		
		if(rlist.size()<1){
			map.put("msg", "操作失败，待处理回款数据条数为：0");
			return map;
		}
		for (ReturnedMoney rm : rlist) {
			String accountNum = rm.getAccountNum();

			//Date createTime = rm.getCreateDate();
			Date createTime = new Date();
			if (StringUtils.isBlank(accountNum) || StringUtils.isBlank(rm.getRealPayMoney()) || createTime == null) {
				map.put("msg", "操作失败，回款数据信息有误");
				return map;
			}
		
			String merchantId=rm.getMerchantId();
			Merchant merchant=new Merchant();
			merchant.setMerchantId(merchantId);
		    merchant=merchantService.getByMerchantId(merchant);
			userId=merchant.getUserId();
			userName=merchant.getUserName();
			
			if (StringUtils.isNotBlank(userId) && StringUtils.isNotBlank(userName)) {
				
				Calendar cal = Calendar.getInstance();
				cal.setTime(createTime);
				int year = cal.get(Calendar.YEAR);// 获取年份
				int month = cal.get(Calendar.MONTH)+1;// 获取月份---Calendar月份初始值为0
				int dd = cal.get(Calendar.DATE);

				String startTime = "";
				String endTime = "";
				String months="";
				String dds="";
				if (dd > 14) {
					if(month<10){
						months="0"+month;
					}
					if(dd<10){
					    dds="0"+dd;
					}else{
						 dds=""+dd;
					}
					startTime = year + "-" + months + "-" + "15";
					endTime = lastDate(year + "-" + months + "-" + dds);
				} else {
					if(month<10){
						months="0"+month;
					}
					startTime = year + "-" + months + "-" + "01";
					endTime = year + "-" + months + "-" + "14";
				}
				// "8,2000,2017-08-15,2017-08-31,2000,2017-09-01,2017-09-14,0,1"
				BigDecimal realMoney = StringUtils.isBlank(rm.getRealPayMoney())?new BigDecimal("0"):new BigDecimal(rm.getRealPayMoney());
				//BigDecimal repayLoanMoney=realMoney;
				 BigDecimal fee=new BigDecimal("0");//罚息金额
				 BigDecimal lastBackAmount=new BigDecimal("0");////剩余未还款金额,所有借款汇总剩余未还
				
				 
				
				/***********************************逾期还款处理*****************************************/
				if(realMoney.compareTo(BigDecimal.ZERO)==1){
					TRepayPlan overPlan = new TRepayPlan();
					overPlan.setWishUserId(userId);
					overPlan.setStatus(Cons.RepayStatus.IN_PAYMENT);
					overPlan.setNum(2);
					overPlan.setIsYuQi(Global.YES);
					List<TRepayPlan> overList = tRepayPlanService.findListByNum(overPlan);//统计逾期未还多少笔
					
					for(int i=0;i<overList.size();i++){
						TRepayPlan overtrp=overList.get(i);
						if(StringUtils.isNotBlank(overtrp.getAccountDate())){//wish业务accountDate用于标记第二批回款逾期开始计时时间
						  TLoanContract tct=tLoanContractService.get(overtrp.getLoanContractId());
						  
						  map=getWishStatus(tct);
						  if(map.get("status").equals("1")){
							  
		                	  BigDecimal principal=StringUtils.isBlank(overtrp.getPrincipal())?new BigDecimal("0"):new BigDecimal(overtrp.getPrincipal());
		                	  BigDecimal principalReal=StringUtils.isBlank(overtrp.getPrincipalReal())?new BigDecimal("0"):new BigDecimal(overtrp.getPrincipalReal());
		                	  BigDecimal diffPrincipal=principal.subtract(principalReal);//剩余应还本金
		                	  BigDecimal interest=StringUtils.isBlank(overtrp.getInterest())?new BigDecimal("0"):new BigDecimal(overtrp.getInterest());
		                	  BigDecimal interestReal=StringUtils.isBlank(overtrp.getInterestReal())?new BigDecimal("0"):new BigDecimal(overtrp.getInterestReal());
		                	  BigDecimal diffInterest=interest.subtract(interestReal);//由于首期未结清 造成的本期应还金额
		                	  double overdueDays = DateUtils.getDistanceOfTwoDate(DateUtils.parseDate(overtrp.getAccountDate()),createTime);//逾期天数
		                	  BigDecimal rate=new BigDecimal(tct.getLoanRate()).divide(new BigDecimal(100)).divide(new BigDecimal(360));
		                   //	（实际回款日期-实际第二回款日期）*逾期金额*年利率/360
		                	  BigDecimal overFee=new BigDecimal(overdueDays).multiply(diffPrincipal.add(diffInterest)).multiply(rate);
		                	  BigDecimal sumAmount=diffPrincipal.add(diffInterest).add(overFee);//总计应还
		                	  fee=fee.add(overFee);
		                	  RepayRecord repayRecord = new RepayRecord();
		                	//if(realMoney.compareTo(BigDecimal.ZERO)==1){
		                	  realMoney=realMoney.subtract(overFee);//扣除罚息--剩下金额再还款
		                	  
		                	  if(realMoney.compareTo(BigDecimal.ZERO)==1){
		                		  if(realMoney.compareTo(sumAmount)>=0){//结清
		  	                        overtrp.setStatus(Cons.RepayStatus.PAID);
		  	                        overtrp.setPrincipalReal(principal.toString());
		  	                        overtrp.setInterestReal(interest.toString());
		  	                        
		  	                        if(StringUtils.isBlank(overtrp.getAccountDate())){//只以第一次还款时间为准，有则不再更新
		  	                        	overtrp.setAccountDate(DateUtils.formatDate(new Date(), "yyyy-MM-dd"));
		  	                        }
		  	                        
		  	                        tRepayPlanService.save(overtrp);
		  	                        tct.setStatus(Cons.LoanContractStatus.CLEARED);//业务完成
		  	                        tLoanContractService.updateStatus(tct);
		  	                    			
		  	                        repayRecord.setMoney(sumAmount.doubleValue());
		  	                    			
		  	                        realMoney=realMoney.subtract(sumAmount);
		  	                        
		  	                        
		  	                      }else{//未结清---------产生逾期
		  	                    	  
		  	                        repayRecord.setMoney(realMoney.doubleValue());
		  	                        if(realMoney.compareTo(diffInterest)>=0){//先处理interest
		  	                        	overtrp.setInterestReal(interest.toString());
		  	                        	overtrp.setPrincipalReal((principalReal.add(realMoney.subtract(diffInterest)).toString()));
		  	                        }else{
		  	                        	overtrp.setInterestReal((interestReal.add(realMoney)).toString());
		  	                        }
		  	                        
		  	                        if(StringUtils.isBlank(overtrp.getAccountDate())){//只以第一次还款时间为准，有则不再更新
		  	                        	overtrp.setAccountDate(DateUtils.formatDate(new Date(), "yyyy-MM-dd"));
		  	                        }
		  	                         overtrp.setStatus(Cons.RepayStatus.IN_PAYMENT);
		  	                    	 tRepayPlanService.save(overtrp);
		  	                    	 realMoney=new BigDecimal("0");
		  	                    	 
		  	                    	 //剩余未还
		  	                    	 BigDecimal lastInterest=StringUtils.isBlank(overtrp.getInterest())?new BigDecimal("0"):new BigDecimal(overtrp.getInterest());
		  	                    	 BigDecimal lastInterestReal=StringUtils.isBlank(overtrp.getInterestReal())?new BigDecimal("0"):new BigDecimal(overtrp.getInterestReal());
		  	                    	 BigDecimal  lastPrincipal=StringUtils.isBlank(overtrp.getPrincipal())?new BigDecimal("0"):new BigDecimal(overtrp.getPrincipal());
		  		                	 BigDecimal lastPrincipalReal=StringUtils.isBlank(overtrp.getPrincipalReal())?new BigDecimal("0"):new BigDecimal(overtrp.getPrincipalReal());
		  		                	 lastBackAmount=lastBackAmount.add(lastInterest.subtract(lastInterestReal).add(lastPrincipal.subtract(lastPrincipalReal)));
		  	                        }
		  	                      
		  	                        //此处循环为第二批的逾期计划，每条记录对应一条业务，结清与未结清都生成一条还款记录
		  	                        repayRecord.setId(IdGen.uuid());
		                    		repayRecord.setLoanContractId(tct.getId());
		                    		repayRecord.setRepayDate(DateUtils.parseDate(createTime));
		                    		repayRecord.setIsYuQi("1");
		                    		repayRecord.setOrganId("1");
		                    		repayRecord.setWishOverFee(overFee.doubleValue());
		                    		repayRecord.setRepayDate(createTime);
		                    		repayRecordService.insert(repayRecord);
		                	  }
		                	   //推送状态通知
		  					    tLoanContractId=tct.getId();
		  					    new Thread() {
		  						   public void run(){
		  							wishContractService.singleInform(tLoanContractId);
		  					      }
		  					    }.start();
		                	//}
						  }	
						}
					
					}
				}
				
				
				
				
				/***********************************首批还款处理*****************************************/
				if(realMoney.compareTo(BigDecimal.ZERO)==1){
					TRepayPlan tp = new TRepayPlan();
					tp.setWishUserId(userId);
					//tp.setStartDate(startTime);
					//tp.setEndDate(endTime);
					tp.setStatus(Cons.RepayStatus.NEED_PAY);
				    tp.setNum(1);
					List<TRepayPlan> oneList = tRepayPlanService.findListByNum(tp);//统计某个时间段内首批有多少笔还款
	                for(int i=0;i<oneList.size();i++){
	                	TRepayPlan trp=oneList.get(i);
	                	TLoanContract tct=tLoanContractService.get(trp.getLoanContractId());
	                	
	                    map=getWishStatus(tct);
					    if(map.get("status").equals("1")){
					      	BigDecimal amount=StringUtils.isBlank(tct.getLoanAmount())?new BigDecimal("0"):new BigDecimal(tct.getLoanAmount());
		                	BigDecimal principal=StringUtils.isBlank(trp.getPrincipal())?new BigDecimal("0"):new BigDecimal(trp.getPrincipal());
		                	BigDecimal principalReal=StringUtils.isBlank(trp.getPrincipalReal())?new BigDecimal("0"):new BigDecimal(trp.getPrincipalReal());
		                	BigDecimal diffAmount=principal.subtract(principalReal);//剩余应还
		              	    RepayRecord repayRecord = new RepayRecord();
		                    if(realMoney.subtract(diffAmount).compareTo(BigDecimal.ZERO)>=0){//结清----------首批多还不做处理
		                    			trp.setStatus(Cons.RepayStatus.PAID);
		                    			trp.setPrincipalReal(principal.toString());
		                    			if(StringUtils.isBlank(trp.getAccountDate())){//只以第一次还款时间为准，有则不再更新
		                    				trp.setAccountDate(DateUtils.formatDate(new Date(), "yyyy-MM-dd"));
		   	  	                        }
		   	  	                        
		                    			tRepayPlanService.save(trp);
		                    			
		                    			repayRecord.setMoney(diffAmount.doubleValue());
		                    			
		                    			realMoney=realMoney.subtract(diffAmount);
		                    			
		                    			if(principal.compareTo(amount)==0){//首批就还完整比合同的贷款----业务还完生成还款记录repayRecord
		                    				tct.setStatus(Cons.LoanContractStatus.CLEARED);//业务完成
			                    			tLoanContractService.updateStatus(tct);
			                    			tp.setNum(2);//获取同笔借款第二批还款计划
			                    			tp.setLoanContractId(trp.getLoanContractId());
			                    			List<TRepayPlan> nextList = tRepayPlanService.findListByNum(tp);
			                    			if(nextList.size()==1){
			                    				TRepayPlan nextPlan=nextList.get(0);
			                    				nextPlan.setStatus(Cons.RepayStatus.PAID);
			                        			tRepayPlanService.save(nextPlan);
			                    			}
			                    			//此处循环为第一批的还款计划，每条记录对应一条业务，结清生成一条还款记录
			                    			repayRecord.setId(IdGen.uuid());
				                    		repayRecord.setLoanContractId(tct.getId());
				                    		repayRecord.setRepayDate(DateUtils.parseDate(createTime));
				                    		repayRecord.setIsYuQi("0");
				                    		repayRecord.setOrganId("1");
				                    		repayRecord.setWishOverFee(0.00);
				                    		repayRecord.setRepayDate(createTime);
				                    		repayRecordService.insert(repayRecord);
		                    			}
		                    			
		                        	}else{//未结清---------首批少还的部分放到下一期----------这里业务没还完不需要生成还款记录推至下期生成
		                        		//repayRecord.setMoney(realMoney.doubleValue());
		                        		trp.setStatus(Cons.RepayStatus.PAID);
		                    			trp.setPrincipalReal(realMoney.toString());
		                    			if(StringUtils.isBlank(trp.getAccountDate())){//只以第一次还款时间为准，有则不再更新
		                    				trp.setAccountDate(DateUtils.formatDate(new Date(), "yyyy-MM-dd"));
		   	  	                        }
		                    			tRepayPlanService.save(trp);
		                    			tp.setNum(2);//获取同笔借款第二批还款计划
		                    			tp.setLoanContractId(trp.getLoanContractId());
		                    			List<TRepayPlan> nextList = tRepayPlanService.findListByNum(tp);
		                    			if(nextList.size()==1){
		                    				TRepayPlan nextPlan=nextList.get(0);
		                        			//将首期未还的金额计算到下期的利息中，在二批的还款中处理
		                        			nextPlan.setInterest((new BigDecimal(trp.getPrincipal()).subtract(new BigDecimal(trp.getPrincipalReal()))).toString());
		                        			tRepayPlanService.save(nextPlan);
		                        			realMoney=new BigDecimal("0");
		                        			
		                        			//剩余未还
		   	  	                    	    BigDecimal  lastPrincipal=StringUtils.isBlank(trp.getPrincipal())?new BigDecimal("0"):new BigDecimal(trp.getPrincipal());
		   	  		                	    BigDecimal lastPrincipalReal=StringUtils.isBlank(trp.getPrincipalReal())?new BigDecimal("0"):new BigDecimal(trp.getPrincipalReal());
		                        			
		                    			}else{
		                    				map.put("msg", "操作失败，获取第二批回款计划数据错误！");
		                    				return map;
		                    			}
		                        	}
		                    
		                    //推送状态通知
	  					    tLoanContractId=tct.getId();
	  					    new Thread() {
	  						   public void run(){
	  							wishContractService.singleInform(tLoanContractId);
	  					      }
	  					    }.start();
		                    
						}
	                	
	                }
				}
				
                
                /***********************************第二批还款处理*****************************************/
				
				if(realMoney.compareTo(BigDecimal.ZERO)>=0){
					TRepayPlan twoPlan = new TRepayPlan();
	            	twoPlan.setWishUserId(userId);
	            	twoPlan.setStartDate(startTime);
	            	twoPlan.setEndDate(endTime);
	            	twoPlan.setStatus(Cons.RepayStatus.NEED_PAY);
	            	twoPlan.setNum(2);
	            	twoPlan.setIsYuQi(Global.NO);
	                List<TRepayPlan> twoList = tRepayPlanService.findListByNum(twoPlan);//统计某个时间段内第二批有多少笔还款
	                for(int i=0;i<twoList.size();i++){
	                	TRepayPlan twotrp=twoList.get(i);
	                	TLoanContract tct=tLoanContractService.get(twotrp.getLoanContractId());
	                	
	                	map=getWishStatus(tct);
						if(map.get("status").equals("1")){
						   	BigDecimal principal=StringUtils.isBlank(twotrp.getPrincipal())?new BigDecimal("0"):new BigDecimal(twotrp.getPrincipal());
		                	BigDecimal principalReal=StringUtils.isBlank(twotrp.getPrincipalReal())?new BigDecimal("0"):new BigDecimal(twotrp.getPrincipalReal());
		                	BigDecimal diffPrincipal=principal.subtract(principalReal);//剩余应还本金
		                	BigDecimal interest=StringUtils.isBlank(twotrp.getInterest())?new BigDecimal("0"):new BigDecimal(twotrp.getInterest());
		                	BigDecimal interestReal=StringUtils.isBlank(twotrp.getInterestReal())?new BigDecimal("0"):new BigDecimal(twotrp.getInterestReal());
		                	BigDecimal diffInterest=interest.subtract(interestReal);//由于首期未结清 造成的本期应还金额
		                	
		                	BigDecimal sumAmount=diffPrincipal.add(diffInterest);//总计应还
		                	 RepayRecord repayRecord = new RepayRecord();
		                	//if(realMoney.compareTo(BigDecimal.ZERO)==1){
		                    		if(realMoney.subtract(sumAmount).compareTo(BigDecimal.ZERO)>=0){//结清
		                    			twotrp.setStatus(Cons.RepayStatus.PAID);
		                    			twotrp.setPrincipalReal(principal.toString());
		                    			twotrp.setInterestReal(interest.toString());
		                    			if(StringUtils.isBlank(twotrp.getAccountDate())){//只以第一次还款时间为准，有则不再更新
		                    				twotrp.setAccountDate(DateUtils.formatDate(new Date(), "yyyy-MM-dd"));
		   	  	                        }
		                    			tRepayPlanService.save(twotrp);
		                    			tct.setStatus(Cons.LoanContractStatus.CLEARED);//业务完成
		                    			tLoanContractService.updateStatus(tct);
		                    			
		                    			repayRecord.setMoney(sumAmount.doubleValue());
		                    			
		                    			realMoney=realMoney.subtract(sumAmount);
		                    			
		                        	}else{//未结清---------产生逾期
		                        		repayRecord.setMoney(realMoney.doubleValue());
		                        		if(realMoney.compareTo(diffInterest)>=0){//先处理interest
		                        			twotrp.setInterestReal(interest.toString());
		                        			twotrp.setPrincipalReal((principalReal.add(realMoney.subtract(diffInterest)).toString()));
		                        		}else{
		                        			twotrp.setInterestReal((interestReal.add(realMoney)).toString());
		                        		}
		                        		twotrp.setIsYuQi(Global.YES);//第二次还款没有结清，则开始逾期
		                        		twotrp.setYuQi(String.valueOf(0));
		                        		twotrp.setStatus(Cons.RepayStatus.IN_PAYMENT);
		                        		
		                        		if(StringUtils.isBlank(twotrp.getAccountDate())){//只以第一次还款时间为准，有则不再更新
		                    				twotrp.setAccountDate(DateUtils.formatDate(new Date(), "yyyy-MM-dd"));
		   	  	                        }
		                        		
		                        		tRepayPlanService.save(twotrp);
		                    			tct.setStatus(Cons.LoanContractStatus.OVERDUE);//业务逾期
		                    			tLoanContractService.updateStatus(tct);
		                    			repayRecord.setIsYuQi("1");
		                    			/*double overdueDays = DateUtils.getDistanceOfTwoDate(DateUtils.parseDate(twotrp.getEndDate()),createTime);
		                    			if (overdueDays > 0) {//逾期
		                    				twotrp.setYuQi(String.valueOf(overdueDays));
		                    				twotrp.setIsYuQi(Global.YES);
		                    			}*/
		                    			
		                    			 //剩余未还
			  	                    	 BigDecimal lastInterest=StringUtils.isBlank(twotrp.getInterest())?new BigDecimal("0"):new BigDecimal(twotrp.getInterest());
			  	                    	 BigDecimal lastInterestReal=StringUtils.isBlank(twotrp.getInterestReal())?new BigDecimal("0"):new BigDecimal(twotrp.getInterestReal());
			  	                    	 BigDecimal  lastPrincipal=StringUtils.isBlank(twotrp.getPrincipal())?new BigDecimal("0"):new BigDecimal(twotrp.getPrincipal());
			  		                	 BigDecimal lastPrincipalReal=StringUtils.isBlank(twotrp.getPrincipalReal())?new BigDecimal("0"):new BigDecimal(twotrp.getPrincipalReal());
			  		                	 lastBackAmount=lastBackAmount.add(lastInterest.subtract(lastInterestReal).add(lastPrincipal.subtract(lastPrincipalReal)));
			  		                	 
		                    			
		                        	}
		                    		//此处循环为第二批的还款计划，每条记录对应一条业务，结清与未结清都生成一条还款记录
		                    		repayRecord.setId(IdGen.uuid());
		                    		repayRecord.setLoanContractId(tct.getId());
		                    		repayRecord.setRepayDate(DateUtils.parseDate(createTime));
		                    		repayRecord.setOrganId("1");
		                    		repayRecord.setWishOverFee(0.00);
		                    		repayRecord.setRepayDate(createTime);
		                    		repayRecordService.insert(repayRecord);
		                    		
		                    		//推送状态通知
			  					    tLoanContractId=tct.getId();
			  					    new Thread() {
			  						   public void run(){
			  							wishContractService.singleInform(tLoanContractId);
			  					      }
			  					    }.start();
						   }
	                   }
				  }
				
				rm.setFee(fee.toString());
				rm.setRepayLoanMoney(new BigDecimal(rm.getRealPayMoney()).subtract(realMoney).toString());
				rm.setUserId(userId);
				rm.setUserName(userName);
				rm.setLastBackAmount(lastBackAmount.toString());
			
				TLoanContract tt=new TLoanContract();
				tt.setCustomerId(userId);
				tt.setStatus(Cons.LoanContractStatus.UN_CLEARED+","+Cons.LoanContractStatus.CLEARED+","+Cons.LoanContractStatus.OVERDUE);
				List<TLoanContract> tctList=tLoanContractService.findAllList(tt);
				int cleared=0;
				if(tctList.size()>0){
					for(int i=0;i<tctList.size();i++){
						TLoanContract contract=tctList.get(i);
						if(contract.getStatus().equals(Cons.LoanContractStatus.CLEARED)){
							cleared++;
						}
					}
					if(cleared==0){
						rm.setCashBackStatus("0");
					}else{
						if(cleared==tctList.size()){
							rm.setCashBackStatus("2");
						}else{
							rm.setCashBackStatus("1");
						}
					}
					
				}
				
				BigDecimal realPayMoney=StringUtils.isBlank(rm.getRealPayMoney())?new BigDecimal("0"):new BigDecimal(rm.getRealPayMoney());
				if(realPayMoney.compareTo(BigDecimal.ZERO)==1){
					rm.setIsDeal("2");
				}
				this.save(rm);
				map.put("msg", "success");
			}
	
			
		}

		return map;
	}

	
	
	
	public List<ReturnedMoney> findListByIds(ReturnedMoney returnedMoney) {
		return dao.findListByIds(returnedMoney);
	}

	private String lastDate(String str) throws ParseException {
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Date date = sdf.parse(str);
		Calendar cal = Calendar.getInstance();
		cal.setTime(date);
		cal.set(Calendar.DAY_OF_MONTH,
				cal.getActualMaximum(Calendar.DAY_OF_MONTH));
		int dd = cal.get(Calendar.DATE);
		String last = sdf.format(cal.getTime());
		return last;
	}

	private int getDate(String str) throws ParseException {
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Date date = sdf.parse(str);
		Calendar cal = Calendar.getInstance();
		cal.setTime(date);
		int dd = cal.get(Calendar.DATE);
		return dd;
	}

	public static void main(String[] str) throws ParseException {
		/*
		 * SimpleDateFormat sdf= new SimpleDateFormat("yyyy-MM-dd"); Date
		 * endTime1= sdf.parse("2017-07-30"); Date
		 * endTime2=sdf.parse("2017-07-31");
		 * 
		 * System.out.println(endTime1.before(endTime2));
		 */
		// System.out.println(lastDate("2017-06-02"));
		String returnedMoneyIds=",1,2,2,2";
		returnedMoneyIds=returnedMoneyIds.substring(1, returnedMoneyIds.length());
		String[] ids=returnedMoneyIds.split(",");
		for(int i=0;i<ids.length;i++){
			if(i==0){
				returnedMoneyIds="'"+ids[i]+"'";
			}else{
				returnedMoneyIds=returnedMoneyIds+","+"'"+ids[i]+"'";
			}
		}
		System.out.println(returnedMoneyIds);
	}
	
	/**
	 * 秒杀货款---判断通知状态
	*/
	public Map<String, String> getWishStatus(TLoanContract tc) {
		Map<String, String> map = new HashMap<String, String>();
		if(tc.getWishStatus().equals(tc.getStatus())){//已通知
			map.put("status", "1");
		}else{//未通知
			if(tc.getStatus().equals("1")){
				map.put("msg", "操作失败，新增业务状态(1)没有通知到易联接口");
			}else if(tc.getStatus().equals("2")){
				map.put("msg", "操作失败，审核中业务状态(2)没有通知到易联接口");
			}else if(tc.getStatus().equals("5")){
				map.put("msg", "操作失败，审核通过业务状态(3)没有通知到易联接口");
			}else if(tc.getStatus().equals("0")){
				map.put("msg", "操作失败，审核不通过业务状态(4)没有通知到易联接口");
			}else if(tc.getStatus().equals("6")){
				map.put("msg", "操作失败，已放款业务状态(5)没有通知到易联接口");
			}else if(tc.getStatus().equals("8")){
				map.put("msg", "操作失败，已逾期业务状态(6)没有通知到易联接口");
			}
			map.put("status", "0");
			
		}
		return map;
	}
}